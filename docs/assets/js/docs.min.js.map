{"version":3,"sources":["../../../node_modules/mout/function/debounce.js","../../../node_modules/mout/math/clamp.js","../../../src/js/util.js","../../../src/js/uprogress.js"],"names":["fn","threshold","isAsap","timeout","result","debounced","args","arguments","context","this","apply","setTimeout","cancel","val","min","max","CSS_PREFIXES","PREFIXED_PROP_CACHE","TRANSITION_END_EVENT","getVendorProp","reflow","element","offsetHeight","style","prop","value","styles","props","keys","Object","length","i","name","document","body","vendorName","charAt","toUpperCase","slice","getVendorCSSProp","replace","str","m1","toLowerCase","transition","start","end","immediate","property","addEventListener","handler","event","propertyName","removeEventListener","keyCounter","allUProgress","DEFAULT","seal","_onResize","debounce","uProgress","_parent","contains","_wrapper","refresh","destroy","resizeDebounce","UProgress","parent","opts","createElement","_progressbar","_blur","HTMLElement","_options","className","_opts","barClass","setAttribute","appendChild","blurClass","_width","Math","scrollWidth","documentElement","clientWidth","offsetWidth","_key","_started","_completing","_destroyed","_to","_from","_duration","_end","_rtl","rtl","class","_targetToPosition","_set","duration","set","target","force","_done","fadeDuration","_status","progress","done","doneDuration","status","options","parentWidth","transitionProgress","getBoundingClientRect","left","parentNode","removeChild","base","babelHelpers.extends","clamp","Date","now","_this","defineProperty","UProgressAPI","self","PUBLIC_METHODS","bind","freeze"],"mappings":"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","file":"docs.min.js","sourcesContent":["\n\n    /**\n     * Debounce callback execution\n     */\n    function debounce(fn, threshold, isAsap){\n        var timeout, result;\n        function debounced(){\n            var args = arguments, context = this;\n            function delayed(){\n                if (! isAsap) {\n                    result = fn.apply(context, args);\n                }\n                timeout = null;\n            }\n            if (timeout) {\n                clearTimeout(timeout);\n            } else if (isAsap) {\n                result = fn.apply(context, args);\n            }\n            timeout = setTimeout(delayed, threshold);\n            return result;\n        }\n        debounced.cancel = function(){\n            clearTimeout(timeout);\n        };\n        return debounced;\n    }\n\n    module.exports = debounce;\n\n\n","\n    /**\n     * Clamps value inside range.\n     */\n    function clamp(val, min, max){\n        return val < min? min : (val > max? max : val);\n    }\n    module.exports = clamp;\n\n","/* eslint-env browser */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\nconst CSS_PREFIXES = ['Webkit', 'O', 'Moz', 'ms'];\nconst PREFIXED_EVENT_NAMES = {\n  transition: 'transitionend',\n  MozTransition: 'mozTransitionEnd',\n  OTransition: 'oTransitionEnd',\n  WebkitTransition: 'webkitTransitionEnd',\n};\nconst PREFIXED_PROP_CACHE = {};\n\nexport const TRANSITION_END_EVENT = PREFIXED_EVENT_NAMES[getVendorProp('transition')];\n\n/**\n * ------------------------------------------------------------------------\n * Public methods\n * ------------------------------------------------------------------------\n */\n\n/**\n * Trigger a reflow on an element.\n *\n * @method reflow\n * @param {HTMLElement} element the element to reflow\n */\nexport function reflow(element) {\n  // eslint-disable-next-line no-unused-expressions\n  element.offsetHeight;\n}\n\n/**\n * Set a style property of an element.\n *\n * @method style\n * @param {HTMLElement} element the element on which to set the style property.\n * @param {string} prop the CSS property to set.\n * @param {string|number} value the value to set.\n */\nexport function style(element, prop, value) {\n  element.style[getVendorProp(prop)] = value;\n}\n\n/**\n * Set multiple style properties of an element.\n *\n * @method styles\n * @param {HTMLElement} element the element on which to set the style property.\n * @param {Object<string, Any>} props a hash of CSS properties and values to set.\n */\nexport function styles(element, props) {\n  for (let i = 0, keys = Object.keys(props), {length} = keys; i < length; i++) {\n    style(element, keys[i], props[keys[i]]);\n  }\n}\n\n/**\n * Get the camel case vendor prefixed version of a style attribute, if the browser doesn't support the unprefixed one.\n *\n * @method getVendorProp\n * @param {string} name the unprefixed camel case attribute\n * @return {string} the attribute supported by the browser\n */\nfunction getVendorProp(name) {\n  if (PREFIXED_PROP_CACHE[name]) {\n    return PREFIXED_PROP_CACHE[name];\n  }\n\n  if (!(name in document.body.style)) {\n    for (let i = 0, {length} = CSS_PREFIXES; i < length; i++) {\n      const vendorName = `${CSS_PREFIXES[i]}${name.charAt(0).toUpperCase()}${name.slice(1)}`;\n\n      if (vendorName in document.body.style) {\n        PREFIXED_PROP_CACHE[name] = vendorName;\n        return vendorName;\n      }\n    }\n  }\n  PREFIXED_PROP_CACHE[name] = name;\n  return name;\n}\n\n/**\n * Get the kebab case version of a style attribute, unprefixed if the browser support it, prefixed otherwise.\n *\n * @method getVendorCSSProp\n * @param {String} name the unprefixed camel case attribute\n * @return {String} the attribute supported by the browser\n */\nexport function getVendorCSSProp(name) {\n  return getVendorProp(name)\n    .replace(/([A-Z])/g, (str, m1) => `-${m1.toLowerCase()}`)\n    .replace(/^ms-/, '-ms-');\n}\n\n/**\n * Execute a start function that trigger a transition, and if an end function is defined,\n * call it when the transition is over, for the given property.\n *\n * @method transition\n * @param {HTMLElement} element The element that will transition when the start function is called\n * @param {function} start a function that trigger the transition on element\n * @param {function} end the function to call when the transition ends\n * @param {boolean} immediate true to call the end function immediatly\n * @param {string} property the property that transition; end function will be called only at the end of the transition on that property\n */\nexport function transition(element, start, end, immediate, property) {\n  if (end) {\n    if (immediate) {\n      setTimeout(end);\n    } else {\n      const handler = event => {\n        if (!property || event.propertyName === getVendorCSSProp(property)) {\n          end(event);\n          element.removeEventListener(TRANSITION_END_EVENT, handler);\n        }\n      };\n\n      element.addEventListener(TRANSITION_END_EVENT, handler);\n    }\n  }\n  start();\n}\n","/* eslint-env jasmine, jquery, browser */\n\nimport debounce from 'mout/function/debounce';\nimport clamp from 'mout/math/clamp';\nimport {reflow, transition, style, styles, getVendorCSSProp} from './util';\n\n/*\n * ------------------------------------------------------------------------\n * Global variables\n * ------------------------------------------------------------------------\n */\n\n/**\n * Used to generate sequential id to save active UProgresses in allProgress\n * @private\n * @type {number}\n */\nlet keyCounter = 0;\n/**\n * Store active UProgresses (so the resize listener can be shared across instances)\n *\n * @private\n * @type {Object}\n */\nconst allUProgress = {};\n/**\n * Default options for all new {@link UProgress} instances.\n *\n * @private\n * @type {Object}\n * @see UProgress.default\n */\nconst DEFAULT = Object.seal({\n  rtl: false,\n  start: 0.01,\n  end: 0.99,\n  duration: 25000,\n  doneDuration: 100,\n  fadeDuration: 200,\n  class: 'uprogress',\n  barClass: 'bar',\n  blurClass: 'blur',\n  resizeDebounce: 300,\n});\n/**\n * Global function registered once to the window `resize` event. On window `resize` event, calls {@link UProgress#refresh} for each exixsting instances.\n * Debounced with threshold defined in `UProgress.Default.resizeDebounce`.\n *\n * @private\n * @type {function}\n */\nconst _onResize = debounce(() => {\n  for (let i = 0, keys = Object.keys(allUProgress), {length} = keys; i < length; i++) {\n    const uProgress = allUProgress[keys[i]];\n\n    if (uProgress._parent.contains(uProgress._wrapper)) {\n      uProgress.refresh();\n    } else {\n      uProgress.destroy();\n    }\n  }\n}, DEFAULT.resizeDebounce);\n\n/*\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\n/**\n * Creates and control a µProgress.\n * @class\n */\nclass UProgress {\n  /**\n   * - Create a new UProgress instance.\n   * - Create a `div` for the µProgress and add it to the `parent`.\n   * - Register to the `resize` event.\n   *\n   * @instance\n   * @constructor\n   * @param {HTMLElement} [parent=document.body] The `HTMLElement` on which the µProgress will stand on top of.\n   * @param {Object} [opts] The µProgress configutation.\n   * @param {boolean} [rtl=false] `true` to move the µProgress from right to left, `false` for left to right.\n   * @param {number} [opts.start=0.01] The position in percentage (.35 is 35%, 1 is 100%) at which the µProgress starts.\n   * @param {number} [opts.end=0.99] The position in percentage (.35 is 35%, 1 is 100%) the µProgress is moving toward when started. Once reached, it will stop until {@link UProgress#set} or {@link UProgress#done} are called.\n   * @param {number} [opts.duration=25000] The durarion in ms it takes for the µProgress to go from `opts.start` to `opts.end`.\n   * @param {number} [opts.doneDuration=100] The duration in ms that the µProgress take to complete when {@link UProgress#done} is called.\n   * @param {number} [opts.fadeDuration=200] The duration in ms the µProgress takes to fade out after it has completed.\n   * @param {number} [opts.class='uprogress'] The CSS class to set on the µProgress element.\n   * @param {number} [opts.barClass='bar'] The CSS class to set on the µProgress bar element.\n   * @param {number} [opts.blurClass='blur'] The CSS class to set on the µProgress blur element.\n   *\n   * @example\n   * Create a new µProgress on top of the viewport with default options.\n   * ```javascript\n   * const uProgress = new UProgress();\n   * uProgress.start();\n   * ```\n   * @example\n   * Create a new µProgress on top of a modal with default options.\n   * ```javascript\n   * const uProgress = new UProgress(document.getElementById('my-modal'));\n   * uProgress.start();\n   * ```\n   * @example\n   * Create a new µProgress on top of the viewport with custom options.\n   * ```javascript\n   * const uProgress = new UProgress({\n   *   start: 0.05,\n   *   duration: 30000\n   * });\n   * uProgress.start();\n   * ```\n   */\n  constructor(parent = document.body, opts) {\n    this._wrapper = document.createElement('div');\n    this._progressbar = document.createElement('div');\n    this._blur = document.createElement('div');\n    if (arguments.length === 1 && !(parent instanceof HTMLElement)) {\n      this._parent = document.body;\n      this._options(parent, DEFAULT);\n    } else {\n      this._options(opts, DEFAULT);\n      this._parent = parent;\n    }\n    this._progressbar.className = this._opts.barClass;\n    this._progressbar.setAttribute('role', 'bar');\n    this._wrapper.appendChild(this._progressbar);\n    this._blur.className = this._opts.blurClass;\n    this._progressbar.appendChild(this._blur);\n    this._width =\n      this._parent === document.body\n        ? Math.min(\n            document.body.scrollWidth,\n            document.documentElement.clientWidth,\n            document.documentElement.offsetWidth\n          )\n        : this._parent.clientWidth;\n    this._key = keyCounter;\n    this._started = false;\n    this._completing = false;\n    this._destroyed = false;\n    this._to = null;\n    this._from = null;\n    this._duration = null;\n    this._end = null;\n    this._rtl = false;\n    styles(this._wrapper, {\n      width: `${this._width}px`,\n      position: this._parent === document.body ? 'fixed' : 'absolute',\n    });\n    styles(this._progressbar, {\n      visibility: 'hidden',\n      width: `${this._width}px`,\n    });\n    this._parent.appendChild(this._wrapper);\n    if (Object.keys(allUProgress).length === 0) {\n      window.addEventListener('resize', _onResize);\n    }\n    allUProgress[this._key] = this;\n    keyCounter += 1;\n  }\n\n  /*\n   * ------------------------------------------------------------------------\n   * Public methods\n   * ------------------------------------------------------------------------\n   */\n\n  /**\n   * Display the µProgress and start its progress from `opts.start` to `opts.end` at a speed corresponding to `opts.duration`. Has no effect if the µProgress is already started.\n   *\n   * @method start\n   * @memberof UProgress\n   * @instance\n   * @return {boolean} `true` if the µProgress has started, `false` otherwise.\n   *\n   * @example\n   * Start the µProgress.\n   * ```javascript\n   * const uProgress = new UProgress();\n   * uProgress.start();\n   * // true\n   * ```\n   */\n  start() {\n    if (!this._started && !this._completing) {\n      this._from = this._opts.start;\n      this._rtl = this._opts.rtl;\n      this._wrapper.className = `${this._opts.class}${this._rtl ? ' rtl' : ''}`;\n      // Initialize µProgress and position it at 'start'\n      styles(this._progressbar, {\n        transition: 'none',\n        transform: `translateX(${this._targetToPosition(this._opts.start)}px)`,\n        opacity: 1,\n        visibility: 'visible',\n      });\n      reflow(this._progressbar);\n      this._started = true;\n      return this._set(this._opts.duration, this._opts.end);\n    }\n    return false;\n  }\n\n  /**\n   * Change the µProgress `target` and the speed at which it reaches it. Useful to give a more accurate progress of multiple sequentials tasks.\n   * If the value of `duration` parameter is equal or greater than 1, then the µProgress will automatically fade out once it reaches 100% progress (equivalent to calling {@link UProgress#done} with `opts.doneDuration` = `duration`).\n   *\n   * @method set\n   * @memberof UProgress\n   * @instance\n   * @param {number} duration The duration in ms the µProgress will take to reach its `target`.\n   * @param {number} [target] The position in percentage (.35 is 35%, 1 is 100%) the µProgress will moving toward. Once reached, it will stop until {@link UProgress#set} or {@link UProgress#done} are called. If `undefined` or `null`, the µProgress target will stay the same.\n   * @param {boolean} [force=false] `true` to set the requested `target` even if ti makes the µProgress moves backward.\n   * @return {boolean} `true` if the µProgress `duration` or `target` has been changed, `false` otherwise.\n   *\n   * @example\n   * Update µProgress speed based on tasks progress.\n   * ```javascript\n   * // doHeavyTask calls a callback when done and is expected to takes up to 7s\n   * // doLightTask calls a callback when done and is expected to takes up to 3s\n   * const uProgress = new UProgress({\n   *   duration: 7000\n   *   end: 0.7\n   * });\n   * uProgress.start();\n   * doHeavyTask(() => {\n   *   // when heavy task is done\n   *   uProgress.set(3000, .99);\n   *   doLightTask(() => {\n   *     // When light task is done\n   *     uProgress.done();\n   *   });\n   * });\n   * ```\n   */\n  set(duration, target = this._to, force = false) {\n    if (this._started && !this._completing) {\n      if (target !== null && target >= 1) {\n        return this._done(false, duration, this._opts.fadeDuration);\n      }\n      if (target === null || force || this._status().progress < target) {\n        return this._set(duration, target === null ? this._to : Math.max(target, this._opts.start), force);\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gracefully complete the µProgress by moving quickly to 100% progress and then fading out. It will moves to 100% at the speed corresponding to `opts.doneDuration` and then fade out with the duration of `opts.fadeDuration`.\n   * Has no effect if the µProgress is not started or if {@link UProgress#done}).\n   *\n   * @method done\n   * @memberof UProgress\n   * @instance\n   * @param  {boolean} destroy `true` to automatically call {@link UProgress#destroy} once the µProgress has completed.\n   * @return {boolean} `true` if the µProgress is going to be completed, `false` otherwise.\n   *\n   * @example\n   * Complete the µProgress once the monitored task is done.\n   * ```javascript\n   * // `doTask` calls a callback when done\n   * const uProgress = new UProgress();\n   * uProgress.start();\n   * doTask(() => {\n   *   // when task is done,\n   *   uProgress.done();\n   * });\n   * ```\n   */\n  done(destroy) {\n    return this._done(destroy, this._opts.doneDuration, this._opts.fadeDuration);\n  }\n\n  /**\n   * Status of the µProgress instance.\n   *\n   * @typedef {Object} Status\n   * @memberof UProgress\n   * @inner\n   * @property {number} target The position in percentage (.35 is 35%, 1 is 100%) the µProgress is moving toward. Once reached, it will stop until {@link UProgress#set} or {@link UProgress#done} are called.\n   * @property {number} duration The duration in ms left to reach the position `Status.target`. Only returned if the µProgress is started.\n   * @property {number} progress The current progress in percentage (.35 is 35%, 1 is 100%). Only returned if the µProgress is started.\n   */\n\n  /**\n   * Get the {@link UProgress~Status} of the µProgress if it's not destroyed, `false` otherwise.\n   *\n   * @method status\n   * @memberof UProgress\n   * @instance\n   * @return {Status|boolean} The current {@link UProgress~Status} or `false`.\n   *\n   * @example\n   * Get the status.\n   * ```javascript\n   * const uProgress = new UProgress({duration: 20000});\n   * uProgress.start();\n   * setTimeout(() => {\n   *   uProgress.status();\n   *   // {target: 0.99, duration: 15000, progress: 0.25}\n   * }, 5000);\n   * ```\n   */\n  status() {\n    return this._destroyed ? false : this._status();\n  }\n\n  /**\n   * Update the µProgress instance configuration.\n   *\n   * @method options\n   * @memberof UProgress\n   * @instance\n   * @param {Object} [opts] The µProgress configutation.\n   * @param {boolean} [rtl=false] `true` to move the µProgress from right to left, `false` for left to right.Will be used on next call to {@link UProgress#start}.\n   * @param {number} [opts.start=0.01] The position in percentage (.35 is 35%, 1 is 100%) at which the µProgress starts. Will be used on next call to {@link UProgress#start}.\n   * @param {number} [opts.end=0.99] The position in percentage (.35 is 35%, 1 is 100%) the µProgress is moving toward when started. Once reached, it will stop until {@link UProgress#set} or {@link UProgress#done} are called. Will be used on next call to {@link UProgress#start}.\n   * @param {number} [opts.duration=25000] The durarion in ms it takes for the µProgress to go from `opts.start` to `opts.end`. Will be used on next call to {@link UProgress#start}.\n   * @param {number} [opts.doneDuration=100] The duration in ms that the µProgress take to complete when {@link UProgress#done} is called. Will be used on next call to {@link UProgress#done}.\n   * @param {number} [opts.fadeDuration=200] The duration in ms the µProgress takes to fade out after it has completed. Will be used on next call to {@link UProgress#done}.\n   * @param {number} [opts.class='uprogress'] The CSS class to set on the the µProgress element. Will be applied right away.\n   * @param {number} [opts.barClass='bar'] The CSS class to set on the the µProgress bar element. Will be applied right away.\n   * @param {number} [opts.blurClass='blur'] The CSS class to set on the the µProgress blur element. Will be applied right away.\n   * @return {UProgress} this, chainable\n   *\n   * @example\n   * Change duration.\n   * ```javascript\n   * const uProgress = new UProgress();\n   * uProgress.options({duration: 20000}).start();\n   * setTimeout(() => {\n   *   uProgress.status();\n   *   // {target: 0.99, duration: 5000, progress: 0.75}\n   * }, 15000);\n   * ```\n   */\n  options(opts) {\n    this._options(opts);\n    return this;\n  }\n\n  /**\n   * Update the µProgress with and position based on its parent width. This methods is automatically called on a window `resize` event. However it has to be called manually if the parent container width changes for a reason other than a window resize.\n   *\n   * @method refresh\n   * @memberof UProgress\n   * @instance\n   *\n   * @example\n   * Create a new µProgress on top of a modal and change it's width.\n   * ```javascript\n   * const uProgress = new UProgress(document.getElementById('my-modal'));\n   * // Modify the modal content (i.e. refresh content with Ajax)\n   * changeModalContent();\n   * uProgress.refresh();\n   * ```\n   */\n  refresh() {\n    const parentWidth =\n      this._parent === document.body\n        ? Math.min(\n            document.body.scrollWidth,\n            document.documentElement.clientWidth,\n            document.documentElement.offsetWidth\n          )\n        : this._parent.clientWidth;\n\n    if (parentWidth !== this._width) {\n      const transitionProgress =\n        1 - this._progressbar.getBoundingClientRect().left / (this._width * (this._rtl ? 1 : -1));\n\n      this._width = parentWidth;\n      style(this._wrapper, 'width', `${this._width}px`);\n      style(this._progressbar, 'width', `${this._width}px`);\n      if (this._started) {\n        styles(this._progressbar, {\n          transition: 'none',\n          transform: `translateX(${this._targetToPosition(transitionProgress)}px)`,\n        });\n        reflow(this._progressbar);\n        styles(this._progressbar, {\n          transition: `${getVendorCSSProp('transform')} ${this._status().duration}ms linear`,\n          transform: `translateX(${this._targetToPosition(this._to)}px)`,\n        });\n      }\n    }\n  }\n\n  /**\n   * - Remove the µProgress from the DOM.\n   * - Remove the `resize` event listener if this is the only non-destroyed instance.\n   *\n   * @method destroy\n   * @memberof UProgress\n   * @instance\n   */\n  destroy() {\n    if (!this._destroyed) {\n      if (this._wrapper.parentNode === this._parent) {\n        this._parent.removeChild(this._wrapper);\n      }\n      delete allUProgress[this._key];\n      if (Object.keys(allUProgress).length === 0) {\n        window.removeEventListener('resize', _onResize);\n        _onResize.cancel();\n      }\n      this._started = false;\n      this._destroyed = true;\n    }\n  }\n\n  /*\n   * ------------------------------------------------------------------------\n   * Private methods\n   * ------------------------------------------------------------------------\n   */\n\n  /**\n   * Update the µProgress instance configuration.\n   *\n   * @method _options\n   * @private\n   * @memberof UProgress\n   * @instance\n   * @param {Object} opts New options to set.\n   * @param {Object} [base=this._opts] Options to use when not defined in `opts`.\n   */\n  _options(opts, base = this._opts) {\n    this._opts = Object.assign({}, base, opts);\n    this._opts.start = clamp(this._opts.start, 0, 0.99);\n    this._opts.end = clamp(this._opts.end, this._opts.start, 1);\n    this._opts.doneDuration = Math.max(this._opts.doneDuration, 0);\n    this._opts.fadeDuration = Math.max(this._opts.fadeDuration, 0);\n    if (opts && opts.class) {\n      this._wrapper.className = `${this._opts.class}`;\n    }\n    if (opts && opts.blurClass) {\n      this._blur.className = this._opts.blurClass;\n    }\n    if (opts && opts.barClass) {\n      this._progressbar.className = this._opts.barClass;\n    }\n  }\n\n  /**\n   * Change the µProgress `target` and the speed at which it reaches it.\n   *\n   * @method _set\n   * @private\n   * @memberof UProgress\n   * @instance\n   * @param {number} [duration=null] The duration in ms the µProgress will take to reach its `target`.\n   * @param {number} [target=this._to] The position in percentage (.35 is 35%, 1 is 100%) the µProgress will moving toward.\n   * @return {boolean} `true` if the µProgress `duration` or `target` has been changed, `false` otherwise.\n   */\n  _set(duration = null, target = this._to) {\n    if (duration !== null && !this._destroyed) {\n      if (target === this._to) {\n        // Stop the transition by setting the target position to the current one\n        style(this._progressbar, 'transform', `translateX(${this._progressbar.getBoundingClientRect().left}px)`);\n        reflow(this._progressbar);\n      }\n      this._duration = Math.max(duration, 0);\n      this._to = target;\n      this._end = Date.now() + this._duration;\n      this._from = this._status().progress;\n      styles(this._progressbar, {\n        transition: this._duration > 0 ? `${getVendorCSSProp('transform')} ${this._duration}ms linear` : 'none',\n        transform: `translateX(${this._targetToPosition(this._to)}px)`,\n      });\n      reflow(this._progressbar);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get the {@link UProgress~Status} of the µProgress.\n   *\n   * @method _status\n   * @private\n   * @memberof UProgress\n   * @instance\n   * @return {Status} The current {@link UProgress~Status}.\n   */\n  _status() {\n    if (!this._started) {\n      return {target: this._opts.end};\n    }\n    const duration = Math.max(0, this._end - Date.now());\n\n    return {\n      target: this._to,\n      duration,\n      progress: this._from + (this._to - this._from) * (1 - (this._duration <= 0 ? 0 : duration / this._duration)),\n    };\n  }\n\n  /**\n   * Gracefully complete the µProgress by moving quickly to 100% progress and then fading out.\n   *\n   * @method _done\n   * @private\n   * @memberof UProgress\n   * @instance\n   * @param  {boolean} destroy `true` to automatically call {@link UProgress#destroy} once the µProgress has completed.\n   * @param {number} doneDuration The duration in ms that the µProgress take to complete.\n   * @param {number} fadeDuration The duration in ms the µProgress takes to fade out after it has completed.\n   * @return {boolen} `true` if the µProgress is going to be completed, `false` otherwise.\n   */\n  _done(destroy, doneDuration, fadeDuration) {\n    if (this._started && !this._destroyed && !this._completing) {\n      this._completing = true;\n      transition(\n        this._progressbar,\n        () => {\n          this._set(doneDuration, 1);\n        },\n        () =>\n          transition(\n            this._progressbar,\n            () => {\n              this._started = false;\n              styles(this._progressbar, {\n                transition: fadeDuration > 0 ? `opacity ${fadeDuration}ms linear` : 'none',\n                opacity: 0,\n              });\n              reflow(this._progressbar);\n            },\n            () => {\n              if (destroy) {\n                this.destroy();\n              } else {\n                style(this._progressbar, 'visibility', 'hidden');\n                this._to = null;\n              }\n              this._completing = false;\n            },\n            fadeDuration <= 0,\n            'opacity'\n          ),\n        doneDuration <= 0,\n        'transform'\n      );\n    } else if (destroy) {\n      this.destroy();\n      return this._started;\n    } else {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Convert a target (in percentage) to a pixel position.\n   *\n   * @method _targetToPosition\n   * @private\n   * @param {number} target The target to convert (number between 0 and 1).\n   * @return {number} The position in pixel corresponding to the given target.\n   */\n  _targetToPosition(target) {\n    return this._width * (1 - target) * (this._rtl ? 1 : -1);\n  }\n}\n\n/**\n * The default options for all new µProgress instances.\n *\n * @name Default\n * @memberof UProgress\n * @static\n * @constant\n * @default\n * @readonly\n * @type {Object}\n * @property {boolean} [rtl=false] `true` to move the µProgress from right to left, `false` for left to right.\n * @property {number} [start=0.01] The position in percentage (.35 is 35%, 1 is 100%) at which the µProgress starts.\n * @property {number} [end=0.99] The position in percentage (.35 is 35%, 1 is 100%) the µProgress is moving toward when started. Once reached, it will stop until {@link UProgress#set} or {@link UProgress#done} are called.\n * @property {number} [duration=2500] The durarion in ms it takes for the µProgress to go from `start` to `end`.\n * @property {number} [doneDuration=100] The duration in ms that the µProgress take to complete when {@link UProgress#done} is called.\n * @property {number} [fadeDuration=200] The duration in ms the µProgress takes to fade out after it has completed.\n * @property {number} [class='uprogress'] The CSS class to set on the the µProgress element.\n * @property {number} [blurClass='blur'] The CSS class to set on the the µProgress blur element.\n * @property {number} [barClass='bar'] The CSS class to set on the the µProgress bar element.\n * @property {number} [resizeDebounce=300] the debounce threshold after which a window `resize` event trigger a call to {@link UProgress#refresh}.\n *\n * @example\n * Change default options\n * ```javascript\n * UProgress.Default.duration = 3000;\n * UProgress.Default.class = 'custom-uprogress';\n * ```\n */\nObject.defineProperty(UProgressAPI, 'Default', {\n  get() {\n    return DEFAULT;\n  },\n});\n\n/**\n * Wrap an instance of {@link UProgress} in a closure to exposed only public methods, and hide private attributes.\n *\n * @method UProgressAPI\n * @private\n * @param {...Any} args arguments passed to {@link UProgress#constrcutor}.\n * @constructor\n */\nexport default function UProgressAPI(...args) {\n  const uProgress = new UProgress(...args);\n  const self = {};\n\n  for (\n    let i = 0, PUBLIC_METHODS = ['start', 'done', 'set', 'status', 'refresh', 'destroy'], {length} = PUBLIC_METHODS;\n    i < length;\n    i++\n  ) {\n    self[PUBLIC_METHODS[i]] = uProgress[PUBLIC_METHODS[i]].bind(uProgress);\n  }\n  self.options = (...chainableArgs) => {\n    uProgress.options(...chainableArgs);\n    return self;\n  };\n  return Object.freeze(self);\n}\n"]}